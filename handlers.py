from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from api import authenticate_user, get_order_by_id, create_otp, verify_otp, APIError
from storage import save_token, get_token, delete_token
import re
from typing import Dict, Any
import logging

# Configure logging
logger = logging.getLogger(__name__)

# Conversation states
ASK_EMAIL, ASK_PASSWORD, ASK_ORDER_ID, WAITING_FOR_OTP = range(4)

def escape_markdown(text: str) -> str:
    """Escape special characters for Telegram markdown."""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    return ''.join('\\' + char if char in special_chars else char for char in str(text))

def format_order_details(order_data: Dict[str, Any]) -> str:
    """Format order details into a readable message with graceful handling of missing fields."""
    try:
        data = order_data.get('data', {})
        items = data.get('items', [])
        
        # Format items list with safe field access
        items_text = ""
        for item in items:
            quantity = item.get('additional', {}).get('quantity', 0)
            name = item.get('name', 'Unknown Item')
            formatted_price = item.get('formatted_price', 'N/A')
            formatted_total = item.get('formatted_total', 'N/A')
            
            items_text += (
                f"\n  ‚Ä¢ {escape_markdown(name)}\n"
                f"    Quantity: {escape_markdown(str(quantity))}\n"
                f"    Price: {escape_markdown(formatted_price)}\n"
                f"    Total: {escape_markdown(formatted_total)}"
            )

        # Safe access to all fields with default values
        order_id = data.get('id', 'N/A')
        state = data.get('status', 'Unknown')
        created_at = data.get('created_at', 'N/A')
        currency = data.get('order_currency_code', 'N/A')
        sub_total = data.get('formatted_sub_total', '0.00')
        shipping = data.get('formatted_shipping_amount', '0.00')
        tax = data.get('formatted_tax_amount', '0.00')
        discount = data.get('formatted_discount_amount', '0.00')
        grand_total = data.get('formatted_grand_total', '0.00')
        total_qty = data.get('total_qty', 0)
        email_sent = 'Yes' if data.get('email_sent') == 1 else 'No'

        return (
            f"üì¶ *Order \\#{escape_markdown(str(order_id))}*\n\n"
            f"*Status:* `{escape_markdown(state)}`\n"
            f"*Date:* `{escape_markdown(created_at)}`\n"
            f"*Currency:* {escape_markdown(currency)}\n\n"
            f"üí∞ *Order Summary*\n"
            f"Subtotal: `{escape_markdown(sub_total)}`\n"
            f"Shipping: `{escape_markdown(shipping)}`\n"
            f"Tax: `{escape_markdown(tax)}`\n"
            f"Discount: `{escape_markdown(discount)}`\n"
            f"*Total: `{escape_markdown(grand_total)}`*\n\n"
            f"üõçÔ∏è *Items:*{items_text}\n\n"
            f"üìä *Additional Info*\n"
            f"Total Items: {escape_markdown(str(total_qty))}\n"
            f"Email Sent: {email_sent}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {order_data}")  # Log the received data for debugging
        return f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_data.get('data', {}).get('id', 'N/A')}: {str(e)}"

def is_valid_email(email: str) -> bool:
    """Validate email format."""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    is_valid = bool(re.match(pattern, email))
    logger.debug(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è {email}: {'–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è' if is_valid else '–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è'}")
    return is_valid

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start the conversation and ask for email."""
    user = update.effective_user
    logger.info(f"–ù–æ–≤–∞—è –±–µ—Å–µ–¥–∞ –Ω–∞—á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} (@{user.username})")
    
    # Check if user already has a valid token
    token = await get_token(user.id)
    if token:
        logger.info(f"User {user.id} already has a valid token")
        await update.message.reply_text(
            "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞\n"
            "2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /logout –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏\n"
            "3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:"
        )
        return ASK_ORDER_ID
    
    # Clear any existing user data if not logged in
    context.user_data.clear()
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞:"
    )
    return ASK_EMAIL

async def ask_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle email input and ask for password."""
    user = update.effective_user
    email = update.message.text.strip()
    logger.info(f"Email –≤–≤–µ–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}: {email}")
    
    if not is_valid_email(email):
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {email}")
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:"
        )
        return ASK_EMAIL
    
    context.user_data['email'] = email
    logger.info(f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    await update.message.reply_text(
        "üìß Email –ø—Ä–∏–Ω—è—Ç!\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:"
    )
    return ASK_PASSWORD

async def ask_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle password input and attempt authentication."""
    user = update.effective_user
    logger.info(f"–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
    
    # Delete password message for security
    await update.message.delete()
    
    try:
        email = context.user_data['email']
        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π {email}")
        
        token = await authenticate_user(email, update.message.text)
        await save_token(user.id, token)
        context.user_data['authenticated'] = True  # Mark user as authenticated
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        
        await update.message.reply_text(
            "‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Ç–µ–ø–µ—Ä—å:\n"
            "1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞\n"
            "2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /logout –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏\n"
            "3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:"
        )
        return ASK_ORDER_ID
        
    except APIError as e:
        logger.error(f"Authentication failed for user {user.id}: {e.message}")
        context.user_data.clear()  # Clear data on authentication failure
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é: {e.message}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /start"
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Unexpected error during authentication for user {user.id}: {str(e)}")
        context.user_data.clear()  # Clear data on error
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /start"
        )
        return ConversationHandler.END

async def ask_order_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle order ID input and return order details."""
    user = update.effective_user
    order_id = update.message.text.strip()
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {order_id}")
    
    try:
        # Verify authentication
        token = await get_token(user.id)
        if not token:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            context.user_data.clear()
            await update.message.reply_text(
                "‚ö†Ô∏è –í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /start"
            )
            return ConversationHandler.END

        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        order_data = await get_order_by_id(order_id, token)
        
        # Extract customer phone from order data
        customer_phone = order_data.get('data', {}).get('customer', {}).get('phone')
        if not customer_phone:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –¥–µ—Ç–∞–ª—è—Ö –∑–∞–∫–∞–∑–∞ {order_id}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –¥–µ—Ç–∞–ª—è—Ö –∑–∞–∫–∞–∑–∞."
            )
            return ASK_ORDER_ID

        # Store order details and phone in context for OTP verification
        context.user_data['current_order'] = order_data
        context.user_data['customer_phone'] = customer_phone
        
        # Send formatted order details
        formatted_message = format_order_details(order_data)
        await update.message.reply_text(
            formatted_message,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        # Create OTP
        try:
            await create_otp(customer_phone)
            await update.message.reply_text(
                f"üì± –ù–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ (OTP).\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥:"
            )
            return WAITING_FOR_OTP
            
        except APIError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ (OTP) –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {customer_phone}: {e.message}")
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥: {e.message}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:"
            )
            return ASK_ORDER_ID
            
    except APIError as e:
        if e.status in [401, 403]:
            logger.warning(f"–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            context.user_data.clear()
            await update.message.reply_text(
                "‚ö†Ô∏è –í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /start"
            )
            return ConversationHandler.END
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e.message}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e.message}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:"
            )
            return ASK_ORDER_ID
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {str(e)}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:"
        )
        return ASK_ORDER_ID

async def handle_otp(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle OTP verification."""
    user = update.effective_user
    otp = update.message.text.strip()
    
    # Delete OTP message for security
    await update.message.delete()
    
    try:
        customer_phone = context.user_data.get('customer_phone')
        if not customer_phone:
            logger.error(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. {user.id}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –Ω–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞:"
            )
            return ASK_ORDER_ID

        # Verify OTP
        try:
            await verify_otp(customer_phone, otp)
            await update.message.reply_text(
                "‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:"
            )
            return ASK_ORDER_ID
            
        except APIError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ (OTP) –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {customer_phone}: {e.message}")
            await update.message.reply_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥: {e.message}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º –∫–æ–¥–æ–º:"
            )
            return WAITING_FOR_OTP
            
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∫–æ–¥–∞ (OTP) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {str(e)}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –Ω–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞:"
        )
        return ASK_ORDER_ID

async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle logout command."""
    user = update.effective_user
    logger.info(f"Logout requested by user {user.id}")
    
    await delete_token(user.id)
    context.user_data.clear()  # Clear all user data
    logger.info(f"User {user.id} logged out successfully")
    
    await update.message.reply_text(
        "üëã –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ —Å–Ω–æ–≤–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle cancel command."""
    user = update.effective_user
    logger.info(f"–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
    
    # Don't clear user data on cancel, preserve authentication
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–Ω–æ–≤–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END
